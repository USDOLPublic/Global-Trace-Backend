import { Id, Pagination, PaginationParams, SortMultipleParams, Sorts } from '@diginexhk/nestjs-base-decorator';
import { ResponseModel } from '@diginexhk/nestjs-response';
import {
    Body,
    Controller,
    Delete,
    Get,
    Header,
    HttpCode,
    HttpStatus,
    Post,
    Put,
    Query,
    Res,
    UploadedFile,
    UseGuards
} from '@nestjs/common';
import { ApiBearerAuth, ApiConsumes, ApiOperation, ApiParam, ApiQuery, ApiTags } from '@nestjs/swagger';
import { Response } from 'express';
import { Connection, EntityManager } from 'typeorm';
import { RequireUploadTemplateFile } from '~core/decorators/require-upload-file.decorator';
import { BaseController } from '~core/http/controllers/base.controller';
import { UploadTemplateResponse } from '~files/http/response/upload-template.response';
import { TaxonomyExploitationUploadService } from '~taxonomy-exploitations/services/taxonomy-exploitation-upload.service';
import { TaxonomyExploitationService } from '~taxonomy-exploitations/services/taxonomy-exploitation.service';
import { JwtAuthGuard } from '~users/http/guards/jwt-auth.guard';
import { ImportTaxonomyExploitationDto } from '../dto/import-taxonomy-exploitation.dto';
import { TaxonomyExploitationUploadFileDto } from '../dto/taxonomy-exploitation-upload-file.dto';
import { UpdateTaxonomyExploitationDto } from '../dto/update-taxonomy-exploitation.dto';
import { TaxonomyExploitationResponse } from '../response/taxonomy-exploitation.response';
import { RoleGuard } from '~users/http/guards/role.guard';
import { UserRoleEnum } from '~role-permissions/enums/user-role.enum';
import { ShortTokenGuard } from '~users/http/guards/short-token.guard';
import { PaginationCollection } from '@diginexhk/typeorm-helper';
import { TaxonomyExploitationType } from '~taxonomy-exploitations/types/taxonomy-exploitation.type';
import { TaxonomyExploitationPaginationResponse } from '../response/taxonomy-exploitation-pagination.response';

@Controller('taxonomy-exploitations')
@ApiTags('Taxonomy Of Exploitation')
@ApiBearerAuth()
export class TaxonomyExploitationController extends BaseController {
    constructor(
        private connection: Connection,
        private taxonomyExploitationService: TaxonomyExploitationService,
        private taxonomyExploitationUploadService: TaxonomyExploitationUploadService
    ) {
        super();
    }

    @Get('upload-templates')
    @UseGuards(ShortTokenGuard)
    @ApiOperation({ description: 'Get taxonomy of exploitation upload template' })
    @Header('Access-Control-Allow-Headers', 'X-Requested-With')
    @Header('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    @Header('Content-Disposition', 'attachment; filename="upload-taxonomy-of-exploitations-template.xlsx"')
    @ApiQuery({
        name: 'shortToken',
        description: 'short token',
        required: true,
        type: String
    })
    async getUploadTemplate(@Res() res: Response) {
        const template = await this.taxonomyExploitationUploadService.getUploadTemplate();
        template.getStream().pipe(res);
    }

    @Post('upload-templates')
    @UseGuards(JwtAuthGuard, RoleGuard(UserRoleEnum.SUPER_ADMIN))
    @ResponseModel(UploadTemplateResponse)
    @ApiOperation({ description: 'Upload and validate taxonomy of exploitation template data' })
    @ApiConsumes('multipart/form-data')
    @RequireUploadTemplateFile({ fieldName: 'file', maxCount: 1 })
    uploadAndValidateTemplate(
        @Body() dto: TaxonomyExploitationUploadFileDto,
        @UploadedFile() file: Express.Multer.File
    ): Promise<UploadTemplateResponse> {
        return this.connection.transaction((manager: EntityManager) => {
            return this.taxonomyExploitationUploadService.withTransaction(manager).uploadAndValidateTemplateData(file);
        });
    }

    @Post('upload-templates/:id')
    @UseGuards(JwtAuthGuard, RoleGuard(UserRoleEnum.SUPER_ADMIN))
    @ApiOperation({ description: 'Import taxonomies of exploitation' })
    @ApiParam({
        name: 'id',
        description: 'File id',
        type: 'string'
    })
    importTaxonomiesOfExploitation(@Id() fileId: string, @Body() dto: ImportTaxonomyExploitationDto) {
        return this.connection.transaction((manager: EntityManager) => {
            return this.taxonomyExploitationUploadService
                .withTransaction(manager)
                .importTaxonomiesOfExploitation(fileId, dto.action);
        });
    }

    @Get()
    @UseGuards(JwtAuthGuard, RoleGuard(UserRoleEnum.SUPER_ADMIN))
    @ResponseModel(TaxonomyExploitationPaginationResponse)
    @ApiOperation({ description: 'Get all taxonomies of exploitation' })
    @ApiQuery({
        name: 'key',
        description: 'Search by indicator/sub-indicator',
        type: String,
        required: false,
        schema: {
            maxLength: 255
        }
    })
    getAllTaxonomyExploitations(
        @Sorts({
            allowedFields: ['category', 'indicator', 'subIndicator', 'riskSeverity'],
            default: { sortField: 'indicator', sortDirection: 'ASC' }
        })
        sort: SortMultipleParams[],
        @Pagination() pagination: PaginationParams,
        @Query('key') key?: string
    ): Promise<PaginationCollection<TaxonomyExploitationType>> {
        return this.taxonomyExploitationService.getAllTaxonomyExploitations(sort, pagination, key);
    }

    @Get(':indicatorId/sub-indicators/:subIndicatorId')
    @UseGuards(JwtAuthGuard, RoleGuard(UserRoleEnum.SUPER_ADMIN))
    @ResponseModel(TaxonomyExploitationResponse)
    @ApiOperation({ description: 'Get a taxonomy of exploitation' })
    @ApiParam({
        name: 'indicatorId',
        description: 'Indicator ID',
        type: 'string'
    })
    @ApiParam({
        name: 'subIndicatorId',
        description: 'Sub-Indicator ID',
        type: 'string'
    })
    getTaxonomyExploitationById(
        @Id('indicatorId') indicatorId: string,
        @Id('subIndicatorId') subIndicatorId: string
    ): Promise<TaxonomyExploitationResponse> {
        return this.taxonomyExploitationService.getTaxonomyExploitation(indicatorId, subIndicatorId);
    }

    @Put(':indicatorId/sub-indicators/:subIndicatorId')
    @UseGuards(JwtAuthGuard, RoleGuard(UserRoleEnum.SUPER_ADMIN))
    @HttpCode(HttpStatus.NO_CONTENT)
    @ApiOperation({ description: 'Update a taxonomy of exploitation' })
    @ApiParam({
        name: 'indicatorId',
        description: 'Indicator ID',
        type: 'string'
    })
    @ApiParam({
        name: 'subIndicatorId',
        description: 'Sub-Indicator ID',
        type: 'string'
    })
    updateTaxonomyExploitation(
        @Id('indicatorId') indicatorId: string,
        @Id('subIndicatorId') subIndicatorId: string,
        @Body() dto: UpdateTaxonomyExploitationDto
    ) {
        return this.connection.transaction((manager: EntityManager) =>
            this.taxonomyExploitationService
                .withTransaction(manager)
                .updateTaxonomyExploitation(indicatorId, subIndicatorId, dto)
        );
    }

    @Delete(':indicatorId/sub-indicators/:subIndicatorId')
    @UseGuards(JwtAuthGuard, RoleGuard(UserRoleEnum.SUPER_ADMIN))
    @HttpCode(HttpStatus.NO_CONTENT)
    @ApiOperation({ description: 'Delete a taxonomy of exploitation' })
    @ApiParam({
        name: 'indicatorId',
        description: 'Indicator ID',
        type: 'string'
    })
    @ApiParam({
        name: 'subIndicatorId',
        description: 'Sub-Indicator ID',
        type: 'string'
    })
    deleteTaxonomyExploitation(@Id('indicatorId') indicatorId: string, @Id('subIndicatorId') subIndicatorId: string) {
        return this.taxonomyExploitationService.deleteTaxonomyExploitation(indicatorId, subIndicatorId);
    }
}
