import { ResponseModel } from '@diginexhk/nestjs-response';
import { Body, Controller, Get, Header, Post, Res, StreamableFile, UploadedFile, UseGuards } from '@nestjs/common';
import { ApiBearerAuth, ApiConsumes, ApiOperation, ApiQuery, ApiTags } from '@nestjs/swagger';
import { Response } from 'express';
import { Connection, EntityManager } from 'typeorm';
import { RequireUploadTemplateFile } from '~core/decorators/require-upload-file.decorator';
import { BaseController } from '~core/http/controllers/base.controller';
import { UserRoleEnum } from '~role-permissions/enums/user-role.enum';
import { TaxonomyExploitationService } from '~taxonomy-exploitations/services/taxonomy-exploitation.service';
import { JwtAuthGuard } from '~users/http/guards/jwt-auth.guard';
import { RoleGuard } from '~users/http/guards/role.guard';
import { ShortTokenGuard } from '~users/http/guards/short-token.guard';
import { UploadTaxonomyExploitationTranslationFileDto } from '../dto/upload-taxonomy-exploitation-translation-file.dto';
import { TranslateTaxonomyResponse } from '../response/translate-taxonomy.repsonse';

@Controller('taxonomy-translations')
@ApiTags('Taxonomy Translation')
@ApiBearerAuth()
export class TaxonomyTranslationController extends BaseController {
    constructor(private connection: Connection, private taxonomyExploitationService: TaxonomyExploitationService) {
        super();
    }

    @Post()
    @UseGuards(JwtAuthGuard, RoleGuard(UserRoleEnum.SUPER_ADMIN))
    @ResponseModel(TranslateTaxonomyResponse)
    @ApiOperation({ description: 'Upload and validate taxonomy translation file' })
    @ApiConsumes('multipart/form-data')
    @RequireUploadTemplateFile({ fieldName: 'file', maxCount: 1 })
    translateTaxonomy(
        @Body() dto: UploadTaxonomyExploitationTranslationFileDto,
        @UploadedFile() file: Express.Multer.File
    ): Promise<TranslateTaxonomyResponse> {
        return this.connection.transaction((manager: EntityManager) => {
            return this.taxonomyExploitationService.withTransaction(manager).translateTaxonomy(file);
        });
    }

    @Get()
    @UseGuards(ShortTokenGuard)
    @Header('Access-Control-Allow-Headers', 'X-Requested-With')
    @Header('Content-Type', 'application/json')
    @Header('Content-Disposition', 'attachment; filename="Taxonomy translate.json"')
    @ApiOperation({ description: 'Get all taxonomy translations' })
    @ApiQuery({
        name: 'shortToken',
        description: 'short token',
        required: true,
        type: String
    })
    async getTaxonomyTranslations(@Res() res: Response) {
        const data = await this.taxonomyExploitationService.getTaxonomyTranslations();
        const buffer = Buffer.from(JSON.stringify(data, null, 4), 'utf8');
        new StreamableFile(buffer).getStream().pipe(res);
    }
}
