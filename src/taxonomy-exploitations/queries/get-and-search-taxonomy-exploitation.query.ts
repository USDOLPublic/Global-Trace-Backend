import { BaseQuery } from '@diginexhk/typeorm-helper';
import { SelectQueryBuilder } from 'typeorm';
import { CategoryEntity } from '~categories/entities/category.entity';
import { CategoryTypeEnum } from '~categories/enums/category-type.enum';
import { convertStringToSearch } from '~core/helpers/string.helper';
import { SearchingTaxonomyExploitationParamType } from '~taxonomy-exploitations/types/search-taxonomy-exploitation-param.type';

export class GetAndSearchTaxonomyExploitationQuery extends BaseQuery<CategoryEntity> {
    constructor(private params: SearchingTaxonomyExploitationParamType) {
        super();
    }

    alias(): string {
        return 'Category';
    }

    async query(query: SelectQueryBuilder<CategoryEntity>) {
        let { key } = this.params;

        query
            .where({ type: CategoryTypeEnum.SUB_INDICATOR })
            .innerJoinAndSelect(`${this.alias()}.indicator`, 'indicator')
            .innerJoinAndSelect(`${this.alias()}.category`, 'category');

        if (key) {
            key = `%${convertStringToSearch(key)}%`;
            query.andWhere(`${this.alias()}.name ILIKE :key`, { key }).orWhere('indicator.name ILIKE :key', { key });
        }
    }

    order(query: SelectQueryBuilder<CategoryEntity>) {
        for (const sortParam of this.params.sortParams) {
            switch (sortParam.field) {
                case 'category':
                    query.addOrderBy(`category.name`, sortParam.direction).addOrderBy(`${this.alias()}.name`, 'ASC');

                    break;
                case 'riskSeverity':
                    query
                        .addOrderBy(`${this.alias()}.riskSeverity`, sortParam.direction)
                        .addOrderBy(`${this.alias()}.name`, 'ASC');
                    break;
                case 'indicator':
                    query.addOrderBy(`indicator.name`, sortParam.direction).addOrderBy(`${this.alias()}.name`, 'ASC');
                    break;
                case 'subIndicator':
                    query.addOrderBy(`${this.alias()}.name`, sortParam.direction);
                    break;
            }
        }
    }
}
