import faker from 'faker';
import { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';
import { CategoryEntity } from '~categories/entities/category.entity';
import { CategoryTypeEnum } from '~categories/enums/category-type.enum';
import { CategoryRepository } from '~categories/repositories/category.repository';
import { TestHelper } from '~core/tests/test.helper';
import { RiskSeverityEnum } from '~taxonomy-exploitations/enums/risk-severity.enum';

export class TaxonomyExploitationTestHelper {
    constructor(private testHelper: TestHelper) {}

    async createIndicator(
        options: QueryDeepPartialEntity<CategoryEntity> = {},
        subIndicators: QueryDeepPartialEntity<CategoryEntity>[] = []
    ) {
        const category = await CategoryRepository.make().createOne({
            name: faker.name.jobTitle(),
            type: CategoryTypeEnum.CATEGORY,
            ...options
        });

        const indicator = await CategoryRepository.make().createOne({
            name: faker.name.jobTitle(),
            type: CategoryTypeEnum.INDICATOR,
            categoryId: category.id,
            ...options
        });

        await CategoryRepository.make().save(
            subIndicators.map((subIndicator: QueryDeepPartialEntity<CategoryEntity>) => ({
                parentId: indicator.id,
                name: subIndicator.name?.toString() || faker.name.jobTitle(),
                type: CategoryTypeEnum.SUB_INDICATOR,
                categoryId: category.id,
                riskSeverity: +subIndicator.riskSeverity || RiskSeverityEnum.LOW
            }))
        );

        return indicator;
    }
}
